{"ast":null,"code":"import Web3 from 'web3';\nlet getWeb3 = new Promise(function (resolve, reject) {\n  // Espera de carga en inyeccion Web3\n  window.addEventListener('load', function () {\n    let web3 = window.web3; // Comprobacion si Web3 fue inyectado (Mist/MetaMask)\n    // Seteo de red Metamas\n\n    if (typeof web3 !== 'undefined') {\n      web3 = new Web3(web3.currentProvider);\n      console.log('Injected web3 detected.');\n    } else if (process.env.NODE_ENV === \"development\") {\n      let provider = new Web3.providers.HttpProvider('http://localhost:7545');\n      web3 = new Web3(provider);\n      console.log('Usando web3 local.');\n    } else {\n      return reject(new Error('Web3 no inyectado.'));\n    }\n\n    web3.eth.getAccounts((err, accounts) => {\n      if (err) {\n        return reject(err);\n      }\n\n      web3.eth.defaultAccount = accounts[0];\n      console.log('Usando cuenta: ', web3.eth.defaultAccount);\n      resolve({\n        web3: web3\n      });\n    });\n  });\n});\nexport default getWeb3;","map":{"version":3,"sources":["/home/fer/UCE/Tesis/blockchain-dapp/client/src/utils/getWeb3.js"],"names":["Web3","getWeb3","Promise","resolve","reject","window","addEventListener","web3","currentProvider","console","log","process","env","NODE_ENV","provider","providers","HttpProvider","Error","eth","getAccounts","err","accounts","defaultAccount"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAEA,IAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AACnD;AACAC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1C,QAAIC,IAAI,GAAGF,MAAM,CAACE,IAAlB,CAD0C,CAG1C;AACA;;AACA,QAAI,OAAOA,IAAP,KAAgB,WAApB,EAAiC;AAC/BA,MAAAA,IAAI,GAAG,IAAIP,IAAJ,CAASO,IAAI,CAACC,eAAd,CAAP;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD,KAHD,MAGO,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AACjD,UAAIC,QAAQ,GAAG,IAAId,IAAI,CAACe,SAAL,CAAeC,YAAnB,CAAgC,uBAAhC,CAAf;AACAT,MAAAA,IAAI,GAAG,IAAIP,IAAJ,CAASc,QAAT,CAAP;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD,KAJM,MAKF;AACH,aAAON,MAAM,CAAC,IAAIa,KAAJ,CAAU,oBAAV,CAAD,CAAb;AACD;;AAEDV,IAAAA,IAAI,CAACW,GAAL,CAASC,WAAT,CAAqB,CAACC,GAAD,EAAMC,QAAN,KAAmB;AACtC,UAAID,GAAJ,EAAS;AACP,eAAOhB,MAAM,CAACgB,GAAD,CAAb;AACD;;AAEDb,MAAAA,IAAI,CAACW,GAAL,CAASI,cAAT,GAA0BD,QAAQ,CAAC,CAAD,CAAlC;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BH,IAAI,CAACW,GAAL,CAASI,cAAxC;AACAnB,MAAAA,OAAO,CAAC;AAACI,QAAAA,IAAI,EAAEA;AAAP,OAAD,CAAP;AACD,KARD;AASD,GA1BD;AA2BD,CA7Ba,CAAd;AA+BA,eAAeN,OAAf","sourcesContent":["import Web3 from 'web3'\n\nlet getWeb3 = new Promise(function (resolve, reject) {\n  // Espera de carga en inyeccion Web3\n  window.addEventListener('load', function () {\n    let web3 = window.web3;\n\n    // Comprobacion si Web3 fue inyectado (Mist/MetaMask)\n    // Seteo de red Metamas\n    if (typeof web3 !== 'undefined') {\n      web3 = new Web3(web3.currentProvider);\n      console.log('Injected web3 detected.');\n    } else if (process.env.NODE_ENV === \"development\") {\n      let provider = new Web3.providers.HttpProvider('http://localhost:7545');\n      web3 = new Web3(provider);\n      console.log('Usando web3 local.');\n    }\n    else {\n      return reject(new Error('Web3 no inyectado.'));\n    }\n\n    web3.eth.getAccounts((err, accounts) => {\n      if (err) {\n        return reject(err);\n      }\n\n      web3.eth.defaultAccount = accounts[0];\n      console.log('Usando cuenta: ', web3.eth.defaultAccount);\n      resolve({web3: web3});\n    });\n  });\n});\n\nexport default getWeb3"]},"metadata":{},"sourceType":"module"}