{"ast":null,"code":"import Web3 from 'web3';\nlet getWeb3 = new Promise(function (resolve, reject) {\n  // Wait for loading completion to avoid race conditions with web3 injection timing.\n  window.addEventListener('load', function () {\n    let web3 = window.web3; // Checking if Web3 has been injected by the browser (Mist/MetaMask)\n\n    if (typeof web3 !== 'undefined') {\n      // Use Mist/MetaMask's provider.\n      let provider = new Web3.providers.HttpProvider('http://localhost:7545');\n      web3 = new Web3(provider);\n      console.log('No web3 instance injected, using Local web3.');\n    } else {\n      return reject(new Error('No web3 instance injected.'));\n    }\n\n    web3.eth.getAccounts((err, accounts) => {\n      if (err) {\n        return reject(err);\n      }\n\n      web3.eth.defaultAccount = accounts[0];\n      console.log('Using account:', web3.eth.defaultAccount);\n      resolve({\n        web3: web3\n      });\n    });\n  });\n});\nexport default getWeb3;","map":{"version":3,"sources":["/home/fer/UCE/Tesis/blockchain-dapp/client/src/utils/getWeb3.js"],"names":["Web3","getWeb3","Promise","resolve","reject","window","addEventListener","web3","provider","providers","HttpProvider","console","log","Error","eth","getAccounts","err","accounts","defaultAccount"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAEA,IAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AACnD;AACAC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1C,QAAIC,IAAI,GAAGF,MAAM,CAACE,IAAlB,CAD0C,CAG1C;;AACA,QAAI,OAAOA,IAAP,KAAgB,WAApB,EAAiC;AAC/B;AACA,UAAIC,QAAQ,GAAG,IAAIR,IAAI,CAACS,SAAL,CAAeC,YAAnB,CAAgC,uBAAhC,CAAf;AACAH,MAAAA,IAAI,GAAG,IAAIP,IAAJ,CAASQ,QAAT,CAAP;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACD,KALD,MAMK;AACH,aAAOR,MAAM,CAAC,IAAIS,KAAJ,CAAU,4BAAV,CAAD,CAAb;AACD;;AAEDN,IAAAA,IAAI,CAACO,GAAL,CAASC,WAAT,CAAqB,CAACC,GAAD,EAAMC,QAAN,KAAmB;AACtC,UAAID,GAAJ,EAAS;AACP,eAAOZ,MAAM,CAACY,GAAD,CAAb;AACD;;AAEDT,MAAAA,IAAI,CAACO,GAAL,CAASI,cAAT,GAA0BD,QAAQ,CAAC,CAAD,CAAlC;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BL,IAAI,CAACO,GAAL,CAASI,cAAvC;AACAf,MAAAA,OAAO,CAAC;AAACI,QAAAA,IAAI,EAAEA;AAAP,OAAD,CAAP;AACD,KARD;AASD,GAvBD;AAwBD,CA1Ba,CAAd;AA4BA,eAAeN,OAAf","sourcesContent":["import Web3 from 'web3'\n\nlet getWeb3 = new Promise(function (resolve, reject) {\n  // Wait for loading completion to avoid race conditions with web3 injection timing.\n  window.addEventListener('load', function () {\n    let web3 = window.web3;\n\n    // Checking if Web3 has been injected by the browser (Mist/MetaMask)\n    if (typeof web3 !== 'undefined') {\n      // Use Mist/MetaMask's provider.\n      let provider = new Web3.providers.HttpProvider('http://localhost:7545');\n      web3 = new Web3(provider);\n      console.log('No web3 instance injected, using Local web3.');\n    }\n    else {\n      return reject(new Error('No web3 instance injected.'));\n    }\n\n    web3.eth.getAccounts((err, accounts) => {\n      if (err) {\n        return reject(err);\n      }\n\n      web3.eth.defaultAccount = accounts[0];\n      console.log('Using account:', web3.eth.defaultAccount);\n      resolve({web3: web3});\n    });\n  });\n});\n\nexport default getWeb3"]},"metadata":{},"sourceType":"module"}